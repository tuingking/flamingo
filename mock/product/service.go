// Code generated by MockGen. DO NOT EDIT.
// Source: internal/product/service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	os "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	product "github.com/tuingking/flamingo/internal/product"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GenerateProductsCsv mocks base method.
func (m *MockService) GenerateProductsCsv(ctx context.Context, n int) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateProductsCsv", ctx, n)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateProductsCsv indicates an expected call of GenerateProductsCsv.
func (mr *MockServiceMockRecorder) GenerateProductsCsv(ctx, n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateProductsCsv", reflect.TypeOf((*MockService)(nil).GenerateProductsCsv), ctx, n)
}

// GenerateRandomProducts mocks base method.
func (m *MockService) GenerateRandomProducts(ctx context.Context, n int) []product.Product {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRandomProducts", ctx, n)
	ret0, _ := ret[0].([]product.Product)
	return ret0
}

// GenerateRandomProducts indicates an expected call of GenerateRandomProducts.
func (mr *MockServiceMockRecorder) GenerateRandomProducts(ctx, n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRandomProducts", reflect.TypeOf((*MockService)(nil).GenerateRandomProducts), ctx, n)
}

// GetAllProducts mocks base method.
func (m *MockService) GetAllProducts(ctx context.Context) ([]product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProducts", ctx)
	ret0, _ := ret[0].([]product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProducts indicates an expected call of GetAllProducts.
func (mr *MockServiceMockRecorder) GetAllProducts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProducts", reflect.TypeOf((*MockService)(nil).GetAllProducts), ctx)
}

// Seed mocks base method.
func (m *MockService) Seed(ctx context.Context, n int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seed", ctx, n)
	ret0, _ := ret[0].(error)
	return ret0
}

// Seed indicates an expected call of Seed.
func (mr *MockServiceMockRecorder) Seed(ctx, n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seed", reflect.TypeOf((*MockService)(nil).Seed), ctx, n)
}
